import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;

public class InventoryManager extends JFrame {
    private List<Item> inventory;
    private JTextField nameField;
    private JTextField quantityField;
    private JTextArea inventoryArea;

    public InventoryManager() {
        setTitle("Inventory Manager");
        setSize(400, 300);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        JPanel mainPanel = new JPanel(new BorderLayout());

        JPanel inputPanel = new JPanel(new GridLayout(3, 2));
        inputPanel.add(new JLabel("Item Name:"));
        nameField = new JTextField();
        inputPanel.add(nameField);
        inputPanel.add(new JLabel("Quantity:"));
        quantityField = new JTextField();
        inputPanel.add(quantityField);

        JButton addButton = new JButton("Add Item");
        addButton.addActionListener(new AddButtonListener());
        inputPanel.add(addButton);

        JButton removeButton = new JButton("Remove Item");
        removeButton.addActionListener(new RemoveButtonListener());
        inputPanel.add(removeButton);

        mainPanel.add(inputPanel, BorderLayout.NORTH);

        inventoryArea = new JTextArea();
        inventoryArea.setEditable(false);
        mainPanel.add(new JScrollPane(inventoryArea), BorderLayout.CENTER);

        inventory = new ArrayList<>();

        add(mainPanel);
        setVisible(true);
    }

    private void updateInventoryArea() {
        inventoryArea.setText("");
        for (Item item : inventory) {
            inventoryArea.append(item.getName() + ": " + item.getQuantity() + "\n");
        }
    }

    private class AddButtonListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            String name = nameField.getText().trim();
            String quantityStr = quantityField.getText().trim();
            if (!name.isEmpty() && !quantityStr.isEmpty()) {
                try {
                    int quantity = Integer.parseInt(quantityStr);
                    if (quantity > 0) {
                        inventory.add(new Item(name, quantity));
                        updateInventoryArea();
                        nameField.setText("");
                        quantityField.setText("");
                    } else {
                        JOptionPane.showMessageDialog(InventoryManager.this, "Quantity must be greater than 0", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(InventoryManager.this, "Invalid quantity format", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(InventoryManager.this, "Please fill in all fields", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private class RemoveButtonListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            String name = nameField.getText().trim();
            if (!name.isEmpty()) {
                boolean removed = false;
                for (Item item : inventory) {
                    if (item.getName().equals(name)) {
                        inventory.remove(item);
                        removed = true;
                        break;
                    }
                }
                if (removed) {
                    updateInventoryArea();
                    nameField.setText("");
                    quantityField.setText("");
                } else {
                    JOptionPane.showMessageDialog(InventoryManager.this, "Item not found", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(InventoryManager.this, "Please enter item name to remove", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(InventoryManager::new);
    }
}

class Item {
    private String name;
    private int quantity;

    public Item(String name, int quantity) {
        this.name = name;
        this.quantity = quantity;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getQuantity() {
        return quantity;
    }

    public void setQuantity(int quantity) {
        this.quantity = quantity;
    }
}
