import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.security.spec.KeySpec;
import java.util.Base64;

public class PasswordManager extends JFrame {
    private JTextField accountField;
    private JPasswordField passwordField;
    private JButton saveButton;
    private JTextArea passwordListArea;

    private static final String SECRET_KEY = "YourSecretKey"; // Replace with your own secret key
    private static final String SALT = "YourSalt"; // Replace with your own salt

    public PasswordManager() {
        setTitle("Password Manager");
        setSize(400, 300);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        JPanel mainPanel = new JPanel(new BorderLayout());

        JPanel inputPanel = new JPanel(new GridLayout(2, 2));
        inputPanel.add(new JLabel("Account:"));
        accountField = new JTextField();
        inputPanel.add(accountField);
        inputPanel.add(new JLabel("Password:"));
        passwordField = new JPasswordField();
        inputPanel.add(passwordField);

        mainPanel.add(inputPanel, BorderLayout.NORTH);

        saveButton = new JButton("Save Password");
        saveButton.addActionListener(new SaveButtonListener());
        mainPanel.add(saveButton, BorderLayout.CENTER);

        passwordListArea = new JTextArea();
        passwordListArea.setEditable(false);
        mainPanel.add(new JScrollPane(passwordListArea), BorderLayout.SOUTH);

        add(mainPanel);
        setVisible(true);
    }

    private String encryptPassword(String password) {
        try {
            SecretKeyFactory factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
            KeySpec spec = new PBEKeySpec(password.toCharArray(), SALT.getBytes(), 65536, 256);
            SecretKey tmp = factory.generateSecret(spec);
            SecretKeySpec secretKey = new SecretKeySpec(tmp.getEncoded(), "AES");

            Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
            cipher.init(Cipher.ENCRYPT_MODE, secretKey);
            return Base64.getEncoder().encodeToString(cipher.doFinal(password.getBytes()));
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error encrypting password", "Error", JOptionPane.ERROR_MESSAGE);
            return null;
        }
    }

    private String decryptPassword(String encryptedPassword) {
        try {
            SecretKeyFactory factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
            KeySpec spec = new PBEKeySpec(SECRET_KEY.toCharArray(), SALT.getBytes(), 65536, 256);
            SecretKey tmp = factory.generateSecret(spec);
            SecretKeySpec secretKey = new SecretKeySpec(tmp.getEncoded(), "AES");

            Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5PADDING");
            cipher.init(Cipher.DECRYPT_MODE, secretKey);
            return new String(cipher.doFinal(Base64.getDecoder().decode(encryptedPassword)));
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error decrypting password", "Error", JOptionPane.ERROR_MESSAGE);
            return null;
        }
    }

    private class SaveButtonListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            String account = accountField.getText().trim();
            String password = new String(passwordField.getPassword()).trim();
            if (!account.isEmpty() && !password.isEmpty()) {
                String encryptedPassword = encryptPassword(password);
                if (encryptedPassword != null) {
                    passwordListArea.append(account + " - " + encryptedPassword + "\n");
                    accountField.setText("");
                    passwordField.setText("");
                }
            } else {
                JOptionPane.showMessageDialog(PasswordManager.this, "Please fill in both account and password", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(PasswordManager::new);
    }
}
