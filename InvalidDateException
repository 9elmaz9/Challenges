import java.io.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Scanner;

class InvalidDateException extends Exception {
    public InvalidDateException(String message) {
        super(message);
    }
}

class Task implements Serializable {
    private static final long serialVersionUID = 1L;

    private String description;
    private Date dueDate;
    private boolean completed;

    public Task(String description, Date dueDate) {
        this.description = description;
        this.dueDate = dueDate;
        this.completed = false;
    }

    public String getDescription() {
        return description;
    }

    public Date getDueDate() {
        return dueDate;
    }

    public boolean isCompleted() {
        return completed;
    }

    public void markAsCompleted() {
        completed = true;
    }

    @Override
    public String toString() {
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String dueDateString = (dueDate != null) ? dateFormat.format(dueDate) : "Not specified";
        return (completed ? "[X] " : "[ ] ") + "Task: " + description + ", Due Date: " + dueDateString;
    }
}

class TaskOrganizer implements Serializable {
    private static final long serialVersionUID = 1L;

    private List<Task> tasks;

    public TaskOrganizer() {
        tasks = new ArrayList<>();
    }

    public void addTask(String description, String dueDateString) throws InvalidDateException {
        Date dueDate = parseDate(dueDateString);
        if (dueDate != null) {
            Task newTask = new Task(description, dueDate);
            tasks.add(newTask);
            System.out.println("Task added:\n" + newTask);
        } else {
            throw new InvalidDateException("Invalid date format. Please use the format yyyy-MM-dd.");
        }
    }

    public void markTaskAsCompleted(int index) {
        if (index >= 0 && index < tasks.size()) {
            Task task = tasks.get(index);
            if (!task.isCompleted()) {
                task.markAsCompleted();
                System.out.println("Task completed: " + task.getDescription());
            } else {
                System.out.println("Task already completed.");
            }
        } else {
            System.out.println("Invalid task index.");
        }
    }

    public void displayTasks() {
        if (tasks.isEmpty()) {
            System.out.println("No tasks found.");
        } else {
            System.out.println("Task List:");
            for (int i = 0; i < tasks.size(); i++) {
                System.out.println((i + 1) + ". " + tasks.get(i));
            }
        }
    }

    public void saveTasksToFile(String filename) {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(filename))) {
            oos.writeObject(this);
            System.out.println("Task data saved to file: " + filename);
        } catch (IOException e) {
            System.out.println("Error saving task data to file: " + e.getMessage());
        }
    }

    public static TaskOrganizer loadTasksFromFile(String filename) {
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(filename))) {
            return (TaskOrganizer) ois.readObject();
        } catch (IOException | ClassNotFoundException e) {
            System.out.println("Error loading task data from file: " + e.getMessage());
            return new TaskOrganizer(); // If an error occurs, return a new task organizer instance
        }
    }

    private static Date parseDate(String dateString) throws InvalidDateException {
        try {
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            return dateFormat.parse(dateString);
        } catch (ParseException e) {
            throw new InvalidDateException("Invalid date format. Please use the format yyyy-MM-dd.");
        }
    }
}

public class TaskOrganizerApp {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        TaskOrganizer taskOrganizer = new TaskOrganizer();

        // Load task data from file (if the file exists)
        taskOrganizer = TaskOrganizer.loadTasksFromFile("tasks_organization.dat");

        while (true) {
            System.out.println("\nChoose an action:");
            System.out.println("1. Add Task");
            System.out.println("2. Mark Task as Completed");
            System.out.println("3. View Tasks");
            System.out.println("4. Save Task Data to File");
            System.out.println("5. Exit");

            int choice = scanner.nextInt();
            scanner.nextLine(); // Clear buffer

            switch (choice) {
                case 1:
                    try {
                        System.out.println("Enter task description:");
                        String description = scanner.nextLine();
                        System.out.println("Enter due date (yyyy-MM-dd), or press Enter for no due date:");
                        String dueDateString = scanner.nextLine();
                        taskOrganizer.addTask(description, dueDateString);
                    } catch (InvalidDateException e) {
                        System.out.println("Error: " + e.getMessage());
                    }
                    break;
                case 2:
                    System.out.println("Enter task index to mark as completed:");
                    int taskIndex = scanner.nextInt();
                    scanner.nextLine(); // Clear buffer
                    taskOrganizer.markTaskAsCompleted(taskIndex - 1);
                    break;
                case 3:
                    taskOrganizer.displayTasks();
                    break;
                case 4:
                    taskOrganizer.saveTasksToFile("tasks_organization.dat");
                    break;
                case 5:
                    System.out.println("Exiting the Task Organizer. Goodbye!");
                    System.exit(0);
                default:
                    System.out.println("Invalid choice. Please choose again.");
            }
        }
    }
}
