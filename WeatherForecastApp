

import java.net.HttpURLConnection;
import java.net.URL;
import org.json.JSONObject;

public class WeatherForecastApp extends JFrame {
    private JLabel cityLabel;
    private JTextField cityField;
    private JButton searchButton;
    private JTextArea resultTextArea;

    private static final String API_KEY = "YOUR_API_KEY"; // Replace with your API key
    private static final String API_URL = "http://api.openweathermap.org/data/2.5/weather?q=";

    public WeatherForecastApp() {
        setTitle("Weather Forecast App");
        setSize(400, 300);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        JPanel mainPanel = new JPanel();
        mainPanel.setLayout(new BorderLayout());

        JPanel inputPanel = new JPanel();
        inputPanel.setLayout(new FlowLayout());

        cityLabel = new JLabel("Enter City:");
        inputPanel.add(cityLabel);

        cityField = new JTextField(20);
        inputPanel.add(cityField);

        searchButton = new JButton("Search");
        searchButton.addActionListener(new SearchButtonListener());
        inputPanel.add(searchButton);

        mainPanel.add(inputPanel, BorderLayout.NORTH);

        resultTextArea = new JTextArea();
        resultTextArea.setEditable(false);
        mainPanel.add(new JScrollPane(resultTextArea), BorderLayout.CENTER);

        add(mainPanel);
        setVisible(true);
    }

    private String fetchWeatherData(String city) throws IOException {
        URL url = new URL(API_URL + city + "&appid=" + API_KEY);
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod("GET");

        BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
        String inputLine;
        StringBuilder response = new StringBuilder();

        while ((inputLine = reader.readLine()) != null) {
            response.append(inputLine);
        }
        reader.close();

        JSONObject jsonResponse = new JSONObject(response.toString());
        JSONObject main = jsonResponse.getJSONObject("main");
        double temperature = main.getDouble("temp") - 273.15; // Convert Kelvin to Celsius
        double humidity = main.getDouble("humidity");
        JSONObject wind = jsonResponse.getJSONObject("wind");
        double windSpeed = wind.getDouble("speed");

        return "Temperature: " + String.format("%.2f", temperature) + "Â°C\nHumidity: " + humidity + "%\nWind Speed: " + windSpeed + " m/s";
    }

    private class SearchButtonListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            String city = cityField.getText().trim();
            if (!city.isEmpty()) {
                try {
                    String weatherData = fetchWeatherData(city);
                    resultTextArea.setText(weatherData);
                } catch (IOException ex) {
                    resultTextArea.setText("Error fetching weather data: " + ex.getMessage());
                }
            } else {
                resultTextArea.setText("Please enter a city name.");
            }
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(WeatherForecastApp::new);
    }
}
