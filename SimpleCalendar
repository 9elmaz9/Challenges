import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.SimpleDateFormat;
import java.util.*;

public class SimpleCalendar extends JFrame {
    private Calendar currentCalendar;
    private JLabel monthLabel;
    private JButton previousMonthButton;
    private JButton nextMonthButton;
    private JPanel calendarPanel;
    private JTextArea eventTextArea;
    private JTextField eventField;
    private JButton addEventButton;

    private Map<Date, String> eventsMap;

    public SimpleCalendar() {
        setTitle("Simple Calendar");
        setSize(400, 300);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        JPanel mainPanel = new JPanel(new BorderLayout());

        JPanel headerPanel = new JPanel(new FlowLayout());
        monthLabel = new JLabel();
        headerPanel.add(monthLabel);

        previousMonthButton = new JButton("Previous");
        previousMonthButton.addActionListener(new PreviousMonthButtonListener());
        headerPanel.add(previousMonthButton);

        nextMonthButton = new JButton("Next");
        nextMonthButton.addActionListener(new NextMonthButtonListener());
        headerPanel.add(nextMonthButton);

        mainPanel.add(headerPanel, BorderLayout.NORTH);

        calendarPanel = new JPanel(new GridLayout(0, 7));
        mainPanel.add(calendarPanel, BorderLayout.CENTER);

        JPanel eventPanel = new JPanel(new BorderLayout());
        eventTextArea = new JTextArea(10, 20);
        eventTextArea.setEditable(false);
        eventPanel.add(new JScrollPane(eventTextArea), BorderLayout.CENTER);

        JPanel eventInputPanel = new JPanel(new FlowLayout());
        eventField = new JTextField(15);
        eventInputPanel.add(eventField);

        addEventButton = new JButton("Add Event");
        addEventButton.addActionListener(new AddEventButtonListener());
        eventInputPanel.add(addEventButton);

        eventPanel.add(eventInputPanel, BorderLayout.SOUTH);

        mainPanel.add(eventPanel, BorderLayout.EAST);

        currentCalendar = Calendar.getInstance();
        updateCalendar();

        eventsMap = new HashMap<>();

        add(mainPanel);
        setVisible(true);
    }

    private void updateCalendar() {
        calendarPanel.removeAll();

        currentCalendar.set(Calendar.DAY_OF_MONTH, 1);
        int month = currentCalendar.get(Calendar.MONTH);
        int year = currentCalendar.get(Calendar.YEAR);
        monthLabel.setText(new SimpleDateFormat("MMMM yyyy").format(currentCalendar.getTime()));

        Calendar calendar = (Calendar) currentCalendar.clone();
        calendar.set(Calendar.DAY_OF_WEEK, calendar.getFirstDayOfWeek());

        for (int i = 0; i < 7; i++) {
            JLabel label = new JLabel(new SimpleDateFormat("EE").format(calendar.getTime()), SwingConstants.CENTER);
            calendarPanel.add(label);
            calendar.add(Calendar.DAY_OF_MONTH, 1);
        }

        while (calendar.get(Calendar.MONTH) == month) {
            int day = calendar.get(Calendar.DAY_OF_MONTH);
            JButton button = new JButton(String.valueOf(day));
            button.addActionListener(new DayButtonListener(day));
            calendarPanel.add(button);
            calendar.add(Calendar.DAY_OF_MONTH, 1);
        }

        calendarPanel.revalidate();
        calendarPanel.repaint();
    }

    private void updateEventTextArea() {
        eventTextArea.setText("");
        Date currentDate = currentCalendar.getTime();
        if (eventsMap.containsKey(currentDate)) {
            eventTextArea.setText(eventsMap.get(currentDate));
        }
    }

    private class PreviousMonthButtonListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            currentCalendar.add(Calendar.MONTH, -1);
            updateCalendar();
            updateEventTextArea();
        }
    }

    private class NextMonthButtonListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            currentCalendar.add(Calendar.MONTH, 1);
            updateCalendar();
            updateEventTextArea();
        }
    }

    private class DayButtonListener implements ActionListener {
        private int day;

        public DayButtonListener(int day) {
            this.day = day;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            currentCalendar.set(Calendar.DAY_OF_MONTH, day);
            updateEventTextArea();
        }
    }

    private class AddEventButtonListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            String event = eventField.getText().trim();
            if (!event.isEmpty()) {
                eventsMap.put(currentCalendar.getTime(), event);
                updateEventTextArea();
                eventField.setText("");
            }
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(SimpleCalendar::new);
    }
}
