import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

class Task implements Serializable {
    private static final long serialVersionUID = 1L;

    private String description;
    private boolean completed;

    public Task(String description) {
        this.description = description;
        this.completed = false;
    }

    public String getDescription() {
        return description;
    }

    public boolean isCompleted() {
        return completed;
    }

    public void markAsCompleted() {
        completed = true;
    }

    @Override
    public String toString() {
        return (completed ? "[X] " : "[ ] ") + description;
    }
}

class TaskList implements Serializable {
    private static final long serialVersionUID = 1L;

    private List<Task> tasks;

    public TaskList() {
        tasks = new ArrayList<>();
    }

    public void addTask(Task task) {
        tasks.add(task);
        System.out.println("Задача добавлена: " + task.getDescription());
    }

    public void markTaskAsCompleted(int index) {
        if (index >= 0 && index < tasks.size()) {
            Task task = tasks.get(index);
            if (!task.isCompleted()) {
                task.markAsCompleted();
                System.out.println("Задача выполнена: " + task.getDescription());
            } else {
                System.out.println("Задача уже выполнена.");
            }
        } else {
            System.out.println("Неверный индекс задачи.");
        }
    }

    public void displayTasks() {
        if (tasks.isEmpty()) {
            System.out.println("Список задач пуст.");
        } else {
            System.out.println("Список задач:");
            tasks.forEach(task -> System.out.println("- " + task));
        }
    }

    public void saveTasksToFile(String filename) {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(filename))) {
            oos.writeObject(this);
            System.out.println("Список задач сохранен в файл: " + filename);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static TaskList loadTasksFromFile(String filename) {
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(filename))) {
            return (TaskList) ois.readObject();
        } catch (IOException | ClassNotFoundException e) {
            e.printStackTrace();
            return new TaskList(); // если произошла ошибка, вернем пустой список задач
        }
    }
}

public class TaskManager {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        TaskList taskList = new TaskList();

        // Загрузка списка задач из файла (если файл существует)
        taskList = TaskList.loadTasksFromFile("tasks.dat");

        while (true) {
            System.out.println("\nВыберите действие:");
            System.out.println("1. Добавить задачу");
            System.out.println("2. Отметить задачу выполненной");
            System.out.println("3. Показать список задач");
            System.out.println("4. Сохранить список задач в файл");
            System.out.println("5. Загрузить список задач из файла");
            System.out.println("6. Выйти");

            int choice = scanner.nextInt();
            scanner.nextLine(); // очистим буфер после ввода числа

            switch (choice) {
                case 1:
                    System.out.println("Введите описание задачи:");
                    String description = scanner.nextLine();
                    Task newTask = new Task(description);
                    taskList.addTask(newTask);
                    break;
                case 2:
                    System.out.println("Введите индекс задачи для отметки выполненной:");
                    int index = scanner.nextInt();
                    scanner.nextLine(); // очистим буфер после ввода числа
                    taskList.markTaskAsCompleted(index);
                    break;
                case 3:
                    taskList.displayTasks();
                    break;
                case 4:
                    taskList.saveTasksToFile("tasks.dat");
                    break;
                case 5:
                    taskList = TaskList.loadTasksFromFile("tasks.dat");
                    break;
                case 6:
                    System.out.println("Программа завершена.");
                    System.exit(0);
                default:
                    System.out.println("Неверный выбор. Пожалуйста, выберите снова.");
            }
        }
    }
}
