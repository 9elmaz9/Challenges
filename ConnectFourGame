import java.util.Scanner;

public class ConnectFourGame {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Welcome to Connect Four!");

        int rows = 6;
        int cols = 7;

        char[][] board = initializeBoard(rows, cols);
        char currentPlayer = 'X';
        boolean gameWon = false;

        while (!gameWon) {
            printBoard(board);

            System.out.println("Player " + currentPlayer + "'s turn");
            System.out.print("Enter column (1-" + cols + "): ");
            int column = scanner.nextInt() - 1;

            if (isValidMove(board, column)) {
                dropDisc(board, column, currentPlayer);
                gameWon = checkWin(board, currentPlayer);
                currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
            } else {
                System.out.println("Invalid move. Column is full. Try again.");
            }
        }

        printBoard(board);
        System.out.println("Player " + currentPlayer + " wins!");
        scanner.close();
    }

    private static char[][] initializeBoard(int rows, int cols) {
        char[][] board = new char[rows][cols];
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                board[i][j] = ' ';
            }
        }
        return board;
    }

    private static void printBoard(char[][] board) {
        System.out.println("Connect Four Board:");

        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                System.out.print("| " + board[i][j] + " ");
            }
            System.out.println("|");
        }

        for (int i = 0; i < board[0].length * 4 + 1; i++) {
            System.out.print("-");
        }
        System.out.println();
    }

    private static boolean isValidMove(char[][] board, int column) {
        return column >= 0 && column < board[0].length && board[0][column] == ' ';
    }

    private static void dropDisc(char[][] board, int column, char currentPlayer) {
        for (int i = board.length - 1; i >= 0; i--) {
            if (board[i][column] == ' ') {
                board[i][column] = currentPlayer;
                break;
            }
        }
    }

    private static boolean checkWin(char[][] board, char currentPlayer) {
        // Check horizontally
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j <= board[0].length - 4; j++) {
                if (board[i][j] == currentPlayer &&
                    board[i][j + 1] == currentPlayer &&
                    board[i][j + 2] == currentPlayer &&
                    board[i][j + 3] == currentPlayer) {
                    return true;
                }
            }
        }

        // Check vertically
        for (int i = 0; i <= board.length - 4; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (board[i][j] == currentPlayer &&
                    board[i + 1][j] == currentPlayer &&
                    board[i + 2][j] == currentPlayer &&
                    board[i + 3][j] == currentPlayer) {
                    return true;
                }
            }
        }

        // Check diagonally (positive slope)
        for (int i = 0; i <= board.length - 4; i++) {
            for (int j = 0; j <= board[0].length - 4; j++) {
                if (board[i][j] == currentPlayer &&
                    board[i + 1][j + 1] == currentPlayer &&
                    board[i + 2][j + 2] == currentPlayer &&
                    board[i + 3][j + 3] == currentPlayer) {
                    return true;
                }
            }
        }

        // Check diagonally (negative slope)
        for (int i = 0; i <= board.length - 4; i++) {
            for (int j = 3; j < board[0].length; j++) {
                if (board[i][j] == currentPlayer &&
                    board[i + 1][j - 1] == currentPlayer &&
                    board[i + 2][j - 2] == currentPlayer &&
                    board[i + 3][j - 3] == currentPlayer) {
                    return true;
                }
            }
        }

        return false;
    }
}
